{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 /*\
 *  f(x)audio.rtf\
 *  Fx\
 *\
 *  Created by tehis on 25/09/2010.\
 *  \
 *	This file is part of Fx.\
 *\
 *	Fx is free software: you can redistribute it and/or modify\
 *	it under the terms of the GNU General Public License as published by\
 *	the Free Software Foundation, either version 3 of the License, or\
 *	(at your option) any later version.\
 \
 *	Fx is distributed in the hope that it will be useful,\
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of\
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\
 *	GNU General Public License for more details.\
 \
 *	You should have received a copy of the GNU General Public License\
 *	along with Fx.  If not, see <http://www.gnu.org/licenses/>. \
 *\
 */\cf3 \
\
~fx = \cf4 FxPublic\cf3 (\cf4 Document\cf3 .current.dir).makeOglGui;\
\
~fx.startFx;\
\
\
(\
	~fx.addGlobalsResponder;\
	~fx.addStatesResponder;\
	~fx.addTriggerResponder;\
	\
	~buf = \cf4 Buffer\cf3 .read(s, \cf5 "sounds/a11wlk01.wav"\cf3 );\
	\
	\cf4 SynthDef\cf3 (\cf6 \\fxwarp\cf3 , \{\cf4 |out, buf, ptr, frq, wsz, dns, ratio, amp, rev, rtime, gate, azm|\cf3 \
		\cf4 var\cf3  sig, env, rL, rR;\
		env = \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 ([0.001, 1.0, 1.0, 0.001], [0.3, 0.4, 0.3], \cf6 \\sine\cf3 , 2, 1), gate);\
		sig = \cf4 Warp1\cf3 .ar(1, buf, ptr, frq, wsz, -1, dns, ratio) * env;\
		#rL, rR = \cf4 GVerb\cf3 .ar(sig, 20, rtime, drylevel: 0) * rev;\
		\cf4 Out\cf3 .ar(out, \cf4 PanB2\cf3 .ar(sig, azm) + \cf4 BiPanB2\cf3 .ar(rL, rR, azm))\
	\}).add;\
	\
	\cf4 SynthDef\cf3 (\cf6 \\decoder\cf3 , \{\cf4 |in|\cf3 \
		\cf4 var\cf3  w, x, y, a, b, c, d;\
		#w, x, y = \cf4 In\cf3 .ar(in, 3);\
\cf7 //		#a, b, c, d = DecodeB2.ar(4, w, x, y);\cf3 \
		\cf4 Out\cf3 .ar(0, \cf4 DecodeB2\cf3 .ar(4, w, x, y))\
	\}).add;\
	\
	~map = (\
		\cf6 \\ptr\cf3 : \cf4 ControlSpec\cf3 (0.0, 1.0),\
		\cf6 \\amp\cf3 : \cf4 ControlSpec\cf3 (1.0, 0.01),\
		\cf6 \\frq\cf3 : \cf4 ControlSpec\cf3 (35/36, 36/35),\
		\cf6 \\wsz\cf3 : \cf4 ControlSpec\cf3 (0.8, 1.2),\
		\cf6 \\dns\cf3 : \cf4 ControlSpec\cf3 (0.8, 1.2),\
		\cf6 \\azm\cf3 : \cf4 ControlSpec\cf3 (-pi, pi),\
		\cf6 \\rev\cf3 : \cf4 ControlSpec\cf3 (0.01, 0.1),\
		\cf6 \\rtime\cf3 : \cf4 ControlSpec\cf3 (2, 15)\
	);\
			\
	~statesFunc = \{\cf4 |values|\cf3 \
		values.states.clump(8).do(\{\cf4 |states, i|\cf3 \
			\cf4 var\cf3  ind = -1, args;\
			args = ~map.collect(\{\cf4 |spec|\cf3  ind=ind+1; spec.map(states[ind]) \});\
			args.frq = args.frq * ~frq[i];\
			args.wsz = args.wsz * ~wsz[i];\
			args.dns = args.dns * ~dns[i];\
			~synths[i].set( *args.asKeyValuePairs );\
		\})\
	\};\
	\
)\
\
(\
	~abus = \cf4 Bus\cf3 .audio(s, 3);\
	~sgrp = \cf4 Group\cf3 ();\
	~decoder = \cf4 Synth\cf3 .after(~sgrp, \cf6 \\decoder\cf3 , [\cf6 \\in\cf3 , ~abus]);\
	\
	~frq = \cf4 Array\cf3 .geom(8, 0.25, 2**(1/3));\
	~dns = \cf4 Array\cf3 .geom(8, 2, 2**(1/4));\
	~wsz = \cf4 Array\cf3 .geom(8, 0.1, 2**(1/5));\
	\
	~synths = \cf4 Array\cf3 .newClear(8);\
	\
	~fx.addStatesFunction(\cf6 \\states\cf3 , ~statesFunc);\
	\
	8.do(\{\cf4 |i|\cf3 \
		~synths.put(i, \
			\cf4 Synth\cf3 .tail(~sgrp, \cf6 \\fxwarp\cf3 , [\cf6 \\out\cf3 , ~abus, \cf6 \\buf\cf3 , ~buf, \cf6 \\ptr\cf3 , 0, \cf6 \\frq\cf3 , ~frq[i], \
				\cf6 \\wsz\cf3 , ~wsz[i], \cf6 \\dns\cf3 , ~dns[i], \cf6 \\ratio\cf3 , rrand(0.0, 0.01), \cf6 \\amp\cf3 , 0.7, \cf6 \\rtime\cf3 , 4, \
				\cf6 \\gate\cf3 , 1, \cf6 \\azm\cf3 , rrand(-pi, pi), \cf6 \\rev\cf3 , 0.05\
			])\
		);\
	\})\
)\
\
~fx.removeStatesFunction(\cf6 \\states\cf3 );\
~synths.do(\cf4 _\cf3 .set(\cf6 \\gate\cf3 , -5))\
\
}