{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf2 (\
~size = 30;\
\
\cf3 // random initial states\cf2 \
~world = (\{\cf4 |i|\cf2   \{\cf4 |j|\cf2   (state: rrand(0.0, 1.0), lastState: 0.0) \} ! ~size  \} ! ~size);\
\
\
\
\cf3 // regular initial states\cf2 \
\
\cf3 //~world = (\{|i|  \{|j|  (state: 0.0, lastState: 0.0) \} ! ~size  \} ! ~size);\cf2 \
\cf3 //~length = 10;\cf2 \
\cf3 //~width = 10;\cf2 \
\cf3 //~left = 10;\cf2 \
\cf3 //~top = 10;\cf2 \
\cf3 //\cf2 \
\cf3 //(\{|i|\cf2 \
\cf3 //	(\{|j| \cf2 \
\cf3 //		if ((i == 0).or(j == 0).or(i == (~width - 1)).or(j == (~length - 1)), \{\cf2 \
\cf3 //			~world[~left + i][~top + j].state = 1.0\cf2 \
\cf3 //		\}) \cf2 \
\cf3 //	\} ! ~length)\cf2 \
\cf3 //\} ! ~width);\cf2 \
\
\
~add = 0.1;\
~nhood = ([(0..2), (0..2).stutter(3)].lace(18) - [1, 1]).clump(2);\
~nhood.removeAt(4);\
\
~next = \{\
	~world.do(\{\cf4 |row, i|\cf2  row.do(\{\cf4 |cell, j|\cf2   cell.lastState = cell.state \}) \});\
	~world.do(\{\cf4 |row, i|\cf2 \
		row.do(\{\cf4 |cell, j|\cf2 \
			\cf4 var\cf2  avg;\
			avg = ~nhood.collect(\{\cf4 |nb|\cf2 \
				~world.wrapAt(i + nb.first).wrapAt(j + nb.last).lastState;\
			\}).sum / ~nhood.size + ~add;\
			cell.state = avg.wrap(0.0, 1.0);\
		\})\
	\})	\
\};\
\
~drawsize = 12;\
~interval = 0.5;\
\
w = \cf4 Window\cf2 (\cf5 "...two-d..."\cf2 , \cf4 Rect\cf2 (200, 200, ~size * ~drawsize + 10, ~size * ~drawsize + 35)).front;\
\cf4 Button\cf2 (w, \cf4 Rect\cf2 (5, 5, 50, 20))\
	.states_([[\cf5 "+"\cf2 , \cf4 Color\cf2 .white, \cf4 Color\cf2 .black], [\cf5 "-"\cf2 , \cf4 Color\cf2 .black, \cf4 Color\cf2 .white]])\
	.action_(\{\cf4 |btn|\cf2 \
		if (btn.value == 1)\
		\{\
			~rout = \cf4 Routine\cf2 (\{\
				\cf4 inf\cf2 .do(\{\
					~next.value;\
					\{ w.refresh \}.defer;\
					~interval.wait\
				\})\
			\}).play;\
		\}\
		\{\
			~rout.stop;\
			~rout = \cf4 nil\cf2 ;\
		\}\
	\});\
	\
\cf4 Slider\cf2 (w, \cf4 Rect\cf2 (60, 5, 200, 20))\
	.value_(~add)\
	.action_(\{\cf4 |slider|\cf2  ~add = slider.value \});\
\
w.drawHook = \{\
	~world.do(\{\cf4 |row, i|\cf2 \
		row.do(\{\cf4 |cell, j|\cf2 \
			\cf4 Pen\cf2 .color = \cf4 Color\cf2 .grey(cell.state);\
			\cf4 Pen\cf2 .fillRect(\cf4 Rect\cf2 (i * ~drawsize + 5, j * ~drawsize + 30, ~drawsize, ~drawsize));\cf3 	\cf2 		\
\cf3 //			Pen.color = Color.grey(1 - cell.state, cell.state);\cf2 \
\cf3 //			Pen.strokeRect(Rect(i * ~drawsize + 5, j * ~drawsize + 30, ~drawsize, ~drawsize));\cf2 \
\cf3 //			Pen.color = Color.grey(cell.state, 1 - cell.state);\cf2 \
\cf3 //			Pen.strokeRect(Rect(i *  ~drawsize + 5 +  ~drawsize - ( ~drawsize * cell.state),\cf2 \
\cf3 //									j *  ~drawsize + 30 +  ~drawsize - ( ~drawsize * cell.state),\cf2 \
\cf3 //									 ~drawsize * 4 * cell.state,\cf2 \
\cf3 //									 ~drawsize * 4 * cell.state))\cf2 \
		\})\
	\})\
\}\
\
\\)\
}